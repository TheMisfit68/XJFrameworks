<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2016r4.1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="1727178751">
 <ObjName>JVSQLiteDatabase</ObjName>
 <ObjContainerID>1830289407</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>SQLiteDatabase</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>lastRowIDFromTable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function lastRowIDFromTable(TableName as String) As Integer</SourceLine>
   <SourceLine>dim sqlString as String = "select seq from sqlite_sequence where name=?"</SourceLine>
   <SourceLine>dim sqlStatement as SQLitePreparedStatement = Prepare(sqlString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim allVariables() as Variant = concatenate(array(tablename))</SourceLine>
   <SourceLine>sqlStatement.bindType(allVariables)</SourceLine>
   <SourceLine>sqlStatement.bind(allVariables)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim recordsFound as recordset = sqlStatement.SQLSelect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Error Then</SourceLine>
   <SourceLine>#if debugbuild then</SourceLine>
   <SourceLine>system.debuglog( _</SourceLine>
   <SourceLine>"[JVSQLiteDatabase] DB Error: " + ErrorMessage+ENDOFLINE+ _</SourceLine>
   <SourceLine>sqlString)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return recordsFound.Field("seq").IntegerValue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>tableName as String</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>lookupID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function lookupID(lookupTable as String, lookupFields as Dictionary) As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim pkField As String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tableInfo as RecordSet = FieldSchema(lookupTable)</SourceLine>
   <SourceLine>while not tableInfo.eof</SourceLine>
   <SourceLine>if tableInfo.Field("IsPrimary").BooleanValue = TRUE then</SourceLine>
   <SourceLine>pkField = tableInfo.Field("ColumnName")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim matchFieldNames() as String</SourceLine>
   <SourceLine>for each fieldName as String in lookupFields.Keys</SourceLine>
   <SourceLine>matchFieldNames.append(fieldName+" = ?")</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>dim matchFieldsString as String= join(matchFieldNames, ", ")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim sqlString as String = "SELECT "+pkField+" FROM "+lookupTable+" WHERE "+matchFieldsString</SourceLine>
   <SourceLine>dim sqlStatement as SQLitePreparedStatement = Prepare(sqlString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sqlStatement.bindType(lookupFields.Values)</SourceLine>
   <SourceLine>sqlStatement.bind(lookupFields.Values)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim foundRecords as RecordSet = sqlStatement.SQLSelect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Error Then</SourceLine>
   <SourceLine>#if debugbuild then</SourceLine>
   <SourceLine>system.debuglog( _</SourceLine>
   <SourceLine>"[JVSQLiteDatabase] DB Error: " + ErrorMessage+ENDOFLINE+ _</SourceLine>
   <SourceLine>sqlString)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if foundRecords &lt;&gt; nil then</SourceLine>
   <SourceLine>foundRecords.moveFirst</SourceLine>
   <SourceLine>return foundRecords.field(pkField).IntegerValue</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>lookupTable as String, lookupFields as Dictionary</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>InsertOrUpdateRecords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertOrUpdateRecords(tableName as String, matchFields as Dictionary, newFields as Dictionary)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim recordsToUpdate as RecordSet = selectRecords(tableName, matchFields)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if recordsToUpdate &lt;&gt; nil  then </SourceLine>
   <SourceLine>updateRecords(tableName, recordsToUpdate, newFields)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>insertRecords(tableName, newFields)</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>tableName as String, matchFields as Dictionary, newFields as Dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>selectRecords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function selectRecords(tableName as String, matchFields as Dictionary) As Recordset</SourceLine>
   <SourceLine>Dim matchFieldNames() as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each fieldName as String in matchFields.Keys</SourceLine>
   <SourceLine>matchFieldNames.append(fieldName+" = ?")</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>dim matchFieldsString as String= join(matchFieldNames, ", ")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim sqlString as String = "SELECT FROM "+tableName+" WHERE "+matchFieldsString</SourceLine>
   <SourceLine>dim sqlStatement as SQLitePreparedStatement = Prepare(sqlString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sqlStatement.bindType(matchFields.Values)</SourceLine>
   <SourceLine>sqlStatement.bind(matchFields.Values)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim foundRecords as RecordSet = sqlStatement.SQLSelect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Error Then</SourceLine>
   <SourceLine>#if debugbuild then</SourceLine>
   <SourceLine>system.debuglog( _</SourceLine>
   <SourceLine>"[JVSQLiteDatabase] DB Error: " + ErrorMessage+ENDOFLINE+ _</SourceLine>
   <SourceLine>sqlString)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>Return nil</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return foundRecords</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>tableName as String, matchFields as Dictionary</ItemParams>
  <ItemResult>Recordset</ItemResult>
 </Method>
 <Method>
  <ItemName>updateRecords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub updateRecords(tableName as String, records as RecordSet, newFields as Dictionary)</SourceLine>
   <SourceLine>newFields = stripPKsFromRecord(tableName, newFields)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If records &lt;&gt; Nil Then</SourceLine>
   <SourceLine>records.MoveFirst</SourceLine>
   <SourceLine>records.Edit</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>  While Not records.EOF</SourceLine>
   <SourceLine>&#32;&#32;&#32;&#32;</SourceLine>
   <SourceLine>for each fieldName as String in newFields.keys</SourceLine>
   <SourceLine>dim fieldValue as Variant = newFields.value(fieldName)</SourceLine>
   <SourceLine>records.field(fieldName).value = fieldValue</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>    records.Update</SourceLine>
   <SourceLine>    records.MoveNext</SourceLine>
   <SourceLine>  Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>  records.Close</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>tableName as String, records as RecordSet, newFields as Dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>insertRecords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub insertRecords(tableName as String, newFields as Dictionary)</SourceLine>
   <SourceLine>newfields = stripPKsFromRecord(tableName, newFields)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim newFieldNames() as String</SourceLine>
   <SourceLine>dim placeHolders() as String</SourceLine>
   <SourceLine>for each fieldName as String in newFields.keys</SourceLine>
   <SourceLine>newFieldNames.append(fieldName)</SourceLine>
   <SourceLine>placeHolders.append("?")</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>dim newFieldNamesString as String= join(newFieldNames, ", ")</SourceLine>
   <SourceLine>dim placeHolderString as String= join(placeHolders, ", ")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim sqlString as String = "INSERT INTO "+tableName+" ("+newFieldNamesString+") VALUES ("+placeHolderString+")" </SourceLine>
   <SourceLine>dim sqlStatement as SQLitePreparedStatement = Prepare(sqlString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sqlStatement.bindType(newFields.Values)</SourceLine>
   <SourceLine>sqlStatement.bind(newFields.Values)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>sqlStatement.SQLExecute</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Error Then</SourceLine>
   <SourceLine>#if debugbuild then</SourceLine>
   <SourceLine>system.debuglog( _</SourceLine>
   <SourceLine>"[JVSQLiteDatabase] DB Error: " + ErrorMessage+ENDOFLINE+ _</SourceLine>
   <SourceLine>sqlString)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>tableName as String, newFields as Dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>stripPKsFromRecord</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function stripPKsFromRecord(tableName as String, record as Dictionary) As Dictionary</SourceLine>
   <SourceLine> // Make sure to exclude any Primary Keys from the new values</SourceLine>
   <SourceLine>dim fieldsInTable as RecordSet = FieldSchema(tableName)</SourceLine>
   <SourceLine>If fieldsInTable &lt;&gt; Nil Then</SourceLine>
   <SourceLine>  While Not fieldsInTable.EOF</SourceLine>
   <SourceLine>dim isPrimaryField as Boolean = fieldsInTable.Field("IsPrimary")</SourceLine>
   <SourceLine>dim fieldName as String =  fieldsInTable.Field("ColumnName")</SourceLine>
   <SourceLine>if isPrimaryField and record.Keys.IndexOf(fieldname) &gt;=0 then</SourceLine>
   <SourceLine>record.Remove(fieldname)</SourceLine>
   <SourceLine>end If</SourceLine>
   <SourceLine>    fieldsInTable.MoveNext</SourceLine>
   <SourceLine>  Wend</SourceLine>
   <SourceLine>  fieldsInTable.Close</SourceLine>
   <SourceLine>End If </SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return record</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>tableName as String, record as Dictionary</ItemParams>
  <ItemResult>Dictionary</ItemResult>
 </Method>
 <Property>
  <ItemName>fieldConditions</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>fieldConditions As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>fieldConditions As Dictionary</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>summaryFields()</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>summaryFields() As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>summaryFields() As String</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>DatabaseFile</ObjName>
   <Visible>1</Visible>
   <ItemType>FolderItem</ItemType>
   <EditorType>FolderItem</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DebugMode</ObjName>
   <Visible>1</Visible>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EncryptionKey</ObjName>
   <Visible>1</Visible>
   <ItemType>String</ItemType>
   <EditorType>String</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LoadExtensions</ObjName>
   <Visible>1</Visible>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MultiUser</ObjName>
   <Visible>1</Visible>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ShortColumnNames</ObjName>
   <Visible>1</Visible>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ThreadYieldInterval</ObjName>
   <Visible>1</Visible>
   <ItemType>Integer</ItemType>
   <EditorType>Integer</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Timeout</ObjName>
   <Visible>1</Visible>
   <ItemType>Double</ItemType>
   <EditorType>Double</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
