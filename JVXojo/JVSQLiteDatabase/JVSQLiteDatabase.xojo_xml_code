<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2017r2.1" FormatVersion="2" MinIDEVersion="20070100">
<block type="Module" ID="1727178751">
 <ObjName>JVSQLiteDatabase</ObjName>
 <ObjContainerID>1830289407</ObjContainerID>
 <IsClass>1</IsClass>
 <Superclass>SQLiteDatabase</Superclass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>lastRowIDFromTable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function lastRowIDFromTable(baseTableName as String) As Integer</SourceLine>
   <SourceLine>dim sqlString as String = "select seq from sqlite_sequence where name=?"</SourceLine>
   <SourceLine>dim sqlStatement as SQLitePreparedStatement = Prepare(sqlString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim allVariables() as Variant = concatenate(array(baseTableName))</SourceLine>
   <SourceLine>// sqlStatement.bindType(allVariables)</SourceLine>
   <SourceLine>sqlStatement.bind(allVariables)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim recordsFound as recordset = sqlStatement.SQLSelect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Error Then</SourceLine>
   <SourceLine>#if debugbuild then</SourceLine>
   <SourceLine>system.debuglog( _</SourceLine>
   <SourceLine>"[JVSQLiteDatabase] DB Error: " + ErrorMessage+ENDOFLINE+ _</SourceLine>
   <SourceLine>sqlString)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>Return -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return recordsFound.Field("seq").IntegerValue</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>baseTableName as String</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>lookupID</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function lookupID(lookupTable as String, matchFields as Dictionary) As Integer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Dim matchFieldNames() as String</SourceLine>
   <SourceLine>dim fieldValues() as Variant</SourceLine>
   <SourceLine>for each fieldName as String in matchFields.keys</SourceLine>
   <SourceLine>dim fieldValue as Variant = matchFields.value(fieldName)</SourceLine>
   <SourceLine>matchFieldNames.append(fieldName+" = ?")</SourceLine>
   <SourceLine>fieldValues.append(fieldValue)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>dim matchFieldsString as String= join(matchFieldNames, " AND ")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim pkfield as String= pkForTable(lookupTable)</SourceLine>
   <SourceLine>dim sqlString as String = "SELECT "+pkField+" FROM "+lookupTable+" WHERE "+matchFieldsString</SourceLine>
   <SourceLine>dim sqlStatement as SQLitePreparedStatement = Prepare(sqlString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// sqlStatement.bindType(matchingRecord.Values)</SourceLine>
   <SourceLine>sqlStatement.bind(fieldValues)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim foundRecords as RecordSet = sqlStatement.SQLSelect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Error Then</SourceLine>
   <SourceLine>#if debugbuild then</SourceLine>
   <SourceLine>system.debuglog( _</SourceLine>
   <SourceLine>"[JVSQLiteDatabase] DB Error: " + ErrorMessage+ENDOFLINE+ _</SourceLine>
   <SourceLine>sqlString)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>return -1</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if foundRecords &lt;&gt; nil then</SourceLine>
   <SourceLine>foundRecords.moveFirst</SourceLine>
   <SourceLine>return foundRecords.field(pkField).IntegerValue</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return -1</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>lookupTable as String, matchFields as Dictionary</ItemParams>
  <ItemResult>Integer</ItemResult>
 </Method>
 <Method>
  <ItemName>InsertOrUpdateRecords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub InsertOrUpdateRecords(baseTableName as String, records() as Dictionary)</SourceLine>
   <SourceLine>for each record as Dictionary in records</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>splitFieldsAndKeyFields(record)</SourceLine>
   <SourceLine>dim newRecord as Dictionary = fields</SourceLine>
   <SourceLine>dim request as Dictionary = keyFields</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim recordsToUpdate as RecordSet = selectRecords(baseTableName, Array(request))</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if recordsToUpdate &lt;&gt; nil  and recordsToUpdate.RecordCount &gt; 0 then </SourceLine>
   <SourceLine>updateRecords(baseTableName, recordsToUpdate, newRecord)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>insertRecords(baseTableName, array(newRecord))</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next record</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>baseTableName as String, records() as Dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>selectRecords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function selectRecords(baseTableName as String, searchRequests() as Dictionary) As Recordset</SourceLine>
   <SourceLine>Dim matchFieldNames() as String</SourceLine>
   <SourceLine>dim matchFieldValues() as Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim requests() as String</SourceLine>
   <SourceLine>dim requestsString as String</SourceLine>
   <SourceLine>for each request as Dictionary in searchRequests</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each fieldName as String in  request.keys</SourceLine>
   <SourceLine>dim fieldValue as String = request.Value(fieldName)</SourceLine>
   <SourceLine>matchFieldNames.append(fieldName+" = ?")</SourceLine>
   <SourceLine>matchFieldValues.append(fieldValue)</SourceLine>
   <SourceLine>next fieldName</SourceLine>
   <SourceLine>requestsString = join(matchFieldNames, " AND ")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>requests.Append(requestsString)</SourceLine>
   <SourceLine>next request</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>requestsString = join(requests, ") OR (")</SourceLine>
   <SourceLine>if requests.ubound &gt; 0 then</SourceLine>
   <SourceLine>requestsString = "("+requestsString+")"</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>&#32;</SourceLine>
   <SourceLine>// Execute the SQL</SourceLine>
   <SourceLine>dim sqlString as String = "SELECT * FROM "+baseTableName+" WHERE "+requestsString</SourceLine>
   <SourceLine>dim sqlStatement as SQLitePreparedStatement = Prepare(sqlString)</SourceLine>
   <SourceLine>// sqlStatement.bindType(matchFields.Values)</SourceLine>
   <SourceLine>sqlStatement.bind(matchFieldValues)</SourceLine>
   <SourceLine>dim foundRecords as RecordSet = sqlStatement.SQLSelect</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Error Then</SourceLine>
   <SourceLine>#if debugbuild then</SourceLine>
   <SourceLine>system.debuglog( _</SourceLine>
   <SourceLine>"[JVSQLiteDatabase] DB Error: " + ErrorMessage+ENDOFLINE+ _</SourceLine>
   <SourceLine>sqlString)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine>Return nil</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return foundRecords</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>baseTableName as String, searchRequests() as Dictionary</ItemParams>
  <ItemResult>Recordset</ItemResult>
 </Method>
 <Method>
  <ItemName>updateRecords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub updateRecords(baseTableName as String, records as RecordSet, newFields as Dictionary)</SourceLine>
   <SourceLine>newFields = stripPKsFromRecord(baseTableName, newFields)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If records &lt;&gt; Nil Then</SourceLine>
   <SourceLine>records.MoveFirst</SourceLine>
   <SourceLine>records.Edit</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>  While Not records.EOF</SourceLine>
   <SourceLine>&#32;&#32;&#32;&#32;</SourceLine>
   <SourceLine>for  each fieldName as String in newFields.keys</SourceLine>
   <SourceLine>dim fieldValue as Variant = newFields.value(fieldName)</SourceLine>
   <SourceLine>records.field(fieldName).value = fieldValue</SourceLine>
   <SourceLine>next fieldName</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>    records.Update</SourceLine>
   <SourceLine>    records.MoveNext</SourceLine>
   <SourceLine>  Wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>  records.Close</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>baseTableName as String, records as RecordSet, newFields as Dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>insertRecords</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub insertRecords(baseTableName as String, newRecords() as Dictionary)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each newRecord as Dictionary in newRecords</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>splitFieldsAndKeyFields(newRecord)</SourceLine>
   <SourceLine>dim record as Dictionary = fields</SourceLine>
   <SourceLine>dim newfields as Dictionary = stripPKsFromRecord(baseTableName, record)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim newFieldNames() as String</SourceLine>
   <SourceLine>dim placeHolders() as String</SourceLine>
   <SourceLine>dim newFieldValues() as Variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for each fieldName as String in newFields.keys</SourceLine>
   <SourceLine>dim fieldValue as Variant = newFields.value(fieldName)</SourceLine>
   <SourceLine>newFieldNames.append(fieldName)</SourceLine>
   <SourceLine>placeHolders.append("?")</SourceLine>
   <SourceLine>newFieldValues.append(fieldValue)</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>dim newFieldNamesString as String= join(newFieldNames, ", ")</SourceLine>
   <SourceLine>dim placeHolderString as String= join(placeHolders, ", ")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim sqlString as String = "INSERT INTO "+baseTableName+" ("+newFieldNamesString+") VALUES ("+placeHolderString+")" </SourceLine>
   <SourceLine>dim sqlStatement as SQLitePreparedStatement = Prepare(sqlString)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// sqlStatement.bindType(newFields.Values)</SourceLine>
   <SourceLine>sqlStatement.bind(newFieldValues)</SourceLine>
   <SourceLine>sqlStatement.SQLExecute</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Error Then</SourceLine>
   <SourceLine>#if debugbuild then</SourceLine>
   <SourceLine>system.debuglog( _</SourceLine>
   <SourceLine>"[JVSQLiteDatabase] DB Error: " + ErrorMessage+ENDOFLINE+ _</SourceLine>
   <SourceLine>sqlString)</SourceLine>
   <SourceLine>#endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next newRecord</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>baseTableName as String, newRecords() as Dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>stripPKsFromRecord</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function stripPKsFromRecord(baseTableName as String, fields as Dictionary) As Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim primaryFieldName as String = pkForTable(baseTableName)</SourceLine>
   <SourceLine>if fields.HasKey(primaryFieldName) then</SourceLine>
   <SourceLine>fields.Remove(primaryFieldName)</SourceLine>
   <SourceLine>end If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return fields</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>baseTableName as String, fields as Dictionary</ItemParams>
  <ItemResult>Dictionary</ItemResult>
 </Method>
 <Method>
  <ItemName>pkForTable</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function pkForTable(baseTableName as String) As String</SourceLine>
   <SourceLine>dim pkField As String = ""</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tablesInfo as RecordSet = FieldSchema(baseTableName)</SourceLine>
   <SourceLine>while pkField &lt;&gt; "" and not tablesInfo.eof</SourceLine>
   <SourceLine>if tablesInfo.Field("IsPrimary").BooleanValue = TRUE then</SourceLine>
   <SourceLine>pkField = tablesInfo.Field("ColumnName")</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine>tablesInfo.MoveNext</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return pkField</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>baseTableName as String</ItemParams>
  <ItemResult>String</ItemResult>
 </Method>
 <Method>
  <ItemName>splitFieldsAndKeyFields</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub splitFieldsAndKeyFields(record as Dictionary)</SourceLine>
   <SourceLine>// This methods devides normal fields and key fields (those marked with an asterix  used during a record-update)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>fields = new Dictionary</SourceLine>
   <SourceLine>keyFields = new Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>for  each key as String in record.keys</SourceLine>
   <SourceLine>dim fieldName as String = key</SourceLine>
   <SourceLine>dim fieldValue as Variant = record.Value(key)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if left(fieldName, 1) = "*" then</SourceLine>
   <SourceLine>fieldName = right(fieldName, len(fieldName)-1)</SourceLine>
   <SourceLine>keyFields.value(fieldName) = fieldValue</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>fields.value(fieldName) = fieldValue</SourceLine>
   <SourceLine>next key</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>record as Dictionary</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Property>
  <ItemName>fields</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>fields As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>fields As Dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>keyFields</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>keyFields As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>keyFields As Dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>maliasSchema</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>maliasSchema As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>maliasSchema As Dictionary</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>aliasSchema</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>aliasSchema As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>aliasSchema As Dictionary</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <SetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Set</SourceLine>
   <SourceLine>maliasSchema = value</SourceLine>
   <SourceLine>End Set</SourceLine>
  </SetAccessor>
  <GetAccessor>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Get</SourceLine>
   <SourceLine>// Lazy loading of tabelForField</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if (maliasSchema = nil) or (maliasSchema.Count = 0) then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>maliasSchema = new Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tablesInfo as Recordset = SQLSelect("SELECT * FROM sqlite_master")</SourceLine>
   <SourceLine>if tablesInfo &lt;&gt; nil then</SourceLine>
   <SourceLine>while not tablesInfo.EOF</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim baseTableName as String = tablesInfo.field("tbl_name")</SourceLine>
   <SourceLine>dim baseTableType as String = tablesInfo.field("type")</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim tableName as String</SourceLine>
   <SourceLine>dim fieldName as String</SourceLine>
   <SourceLine>dim fullyQualifiedAliasName as String</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Select Case baseTableType</SourceLine>
   <SourceLine>Case "table"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim fieldInfo  as RecordSet = fieldSchema(baseTableName)</SourceLine>
   <SourceLine>while not fieldInfo.EOF</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>fieldName = fieldInfo.field("ColumnName")</SourceLine>
   <SourceLine>fullyQualifiedAliasName  = baseTableName+"."+fieldName</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>maliasSchema.Value(fullyQualifiedAliasName) = baseTableName+"."+fieldName</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>fieldInfo.MoveNext</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case "view"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Filter out the relevant part</SourceLine>
   <SourceLine>dim sqlString  as String = tablesInfo.field("sql")</SourceLine>
   <SourceLine>sqlString = ReplaceLineEndings(sqlString,"")</SourceLine>
   <SourceLine>sqlString = sqlString.Replace("^.*SELECT\s+(.*)\s+FROM.*$","$1",True)</SourceLine>
   <SourceLine>sqlString = sqlString.Replace("\s*,\s*",ENDOFLINE, True)</SourceLine>
   <SourceLine>dim fieldAssignments() as String =  Split(sqlString, ENDOFLINE)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Split into tablename, fieldname and alias</SourceLine>
   <SourceLine>for each fieldAssignment as String in fieldAssignments</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim fieldPart as String</SourceLine>
   <SourceLine>dim aliasPart as String</SourceLine>
   <SourceLine>if fieldAssignment.contains(" ") then</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>fieldPart = fieldAssignment.replace("(.*)\s(?:AS\s)?(.*)?","$1", True)</SourceLine>
   <SourceLine>aliasPart= fieldAssignment.replace("(.*)\s(?:AS\s)?(.*)?","$2", True)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>fieldPart = fieldAssignment</SourceLine>
   <SourceLine>aliasPart = fieldAssignment</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if fieldPart.contains(".") then</SourceLine>
   <SourceLine>tableName = fieldPart.NthField( ".", 1)</SourceLine>
   <SourceLine>fieldName = fieldPart.NthField( ".", 2)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>tableName = baseTableName</SourceLine>
   <SourceLine>fieldName = fieldPart</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if aliasPart.contains(".") then</SourceLine>
   <SourceLine>fullyQualifiedAliasName  = baseTableName+"."+aliasPart.NthField( ".", 2)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>fullyQualifiedAliasName  = baseTableName+"."+aliasPart</SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Assign to the result</SourceLine>
   <SourceLine>maliasSchema.value(fullyQualifiedAliasName) = tableName+"."+fieldName</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Case "index"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Else</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Select</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>tablesInfo.MoveNext</SourceLine>
   <SourceLine>wend</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>#if DebugBuild</SourceLine>
   <SourceLine>system.DebugLog(maliasSchema.description)</SourceLine>
   <SourceLine>#Endif</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end if</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>return maliasSchema</SourceLine>
   <SourceLine>End Get</SourceLine>
  </GetAccessor>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>DatabaseFile</ObjName>
   <Visible>1</Visible>
   <ItemType>FolderItem</ItemType>
   <EditorType>FolderItem</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>DebugMode</ObjName>
   <Visible>1</Visible>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>EncryptionKey</ObjName>
   <Visible>1</Visible>
   <ItemType>String</ItemType>
   <EditorType>String</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>LoadExtensions</ObjName>
   <Visible>1</Visible>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>MultiUser</ObjName>
   <Visible>1</Visible>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ShortColumnNames</ObjName>
   <Visible>1</Visible>
   <ItemType>Boolean</ItemType>
   <EditorType>Boolean</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>ThreadYieldInterval</ObjName>
   <Visible>1</Visible>
   <ItemType>Integer</ItemType>
   <EditorType>Integer</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Timeout</ObjName>
   <Visible>1</Visible>
   <ItemType>Double</ItemType>
   <EditorType>Double</EditorType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
